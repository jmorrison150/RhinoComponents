<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>0</Major>
          <Minor>9</Minor>
          <Revision>76</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">52228ca2-e992-45c5-8c7b-c658ee5ba46f</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">2</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;150;0;0</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="3">
            <item name="Date" type_name="gh_date" type_code="8">635541160615456640</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="Name" type_name="gh_string" type_code="10">brick_11.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>166</X>
                  <Y>66</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">0.64</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">4</item>
          </items>
          <chunks count="4">
            <chunk name="Object" index="0">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">a9a8ebd2-fff5-4c44-a8f5-739736d129ba</item>
                <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="AdditionalSource" type_name="gh_string" type_code="10">









  #region customCode
  List&lt;Brick&gt; bricks = new List&lt;Brick&gt;();

  List&lt;Curve&gt; brickCourses(Brep brickSurface, List&lt;Surface&gt; cuttingSurfaces) {
    List&lt;Curve&gt; curves = new List&lt;Curve&gt;();
    for(int i = 0; i &lt; cuttingSurfaces.Count; i++) {
      Curve[] intersectionCurves;
      Point3d[] intersectionPoints;
      Rhino.Geometry.Intersect.Intersection.BrepSurface(brickSurface, cuttingSurfaces[i], 0.001, out intersectionCurves, out intersectionPoints);
      curves.AddRange(intersectionCurves);
    }
    return curves;
  }
  void layBrick(List&lt;Curve&gt; curves, int course, Surface refSurface, bool reverse) {

    for(int i = 0; i &lt; curves.Count; i++) {
      if(reverse) { curves[i].Reverse(); }

      //units are meters here, in the Brick Class, and while laying bricks
      //double sizeZ = 0.0650;
      double sizeX = 0.2150;
      //double sizeY = 0.1025;
      double jointSize = 0.0100;
      //double spacingPercent = 0.0;

      //compute brick spacing
      double size = sizeX;
      double maxLength = curves[i].GetLength(0.001);
      double currentLength = 0.0;
      double extraSpace = 0.0;
      double lengthLeft;
      Point3d currentPoint;
      Point3d nextPoint;
      Vector3d previousVector;
      Circle circle;
      Brick brick;

      //last brick
      if(maxLength &gt; ( ( size * 2.0 ) + jointSize )) {
        currentPoint = curves[i].PointAtLength(maxLength - size);
        nextPoint = curves[i].PointAtLength(maxLength);
        Vector3d tangent = curves[i].TangentAt(maxLength - ( ( size * 2.0 ) + jointSize ));
        circle = new Circle(currentPoint, tangent, nextPoint);
        brick = new Brick(currentPoint, nextPoint, circle.Radius, tangent, refSurface);
        bricks.Add(brick);

        maxLength -= sizeX;
      }



      //first brick////////////////////
      currentPoint = curves[i].PointAtStart;
      lengthLeft = maxLength - currentLength;
      //compute spacing
      size = 0.215;
      size += jointSize;
      size += extraSpace;
      if(size &gt; lengthLeft) { size = lengthLeft; }
      //if(course%2==1) { size*=0.5; }//just for first brick
      currentLength += size;
      //endPoint
      nextPoint = curves[i].PointAtLength(currentLength);
      circle = new Circle(currentPoint, curves[i].TangentAtStart, nextPoint);
      brick = new Brick(currentPoint, nextPoint, circle.Radius, curves[i].TangentAtStart, refSurface);
      bricks.Add(brick);
      //reset
      previousVector = nextPoint - currentPoint;



      //second brick////////////////////
      if(lengthLeft &gt; 0.250) {
        currentPoint = curves[i].PointAtLength(currentLength);
        lengthLeft = maxLength - currentLength;
        //compute spacing
        size = 0.215;
        size += jointSize;
        size += extraSpace;
        if(size &gt; lengthLeft) { size = lengthLeft; }

        if(course % 2 == 1) { size *= 0.5; }//just for first brick
        currentLength += size;
        //endPoint
        nextPoint = curves[i].PointAtLength(currentLength - jointSize);
        circle = new Circle(currentPoint, previousVector, nextPoint);
        brick = new Brick(currentPoint, nextPoint, circle.Radius, previousVector, refSurface);
        bricks.Add(brick);
        //reset
        previousVector = nextPoint - currentPoint;
      }


      //lay bricks
      while(currentLength &lt; maxLength) {

        //startPoint
        currentPoint = curves[i].PointAtLength(currentLength);
        lengthLeft = maxLength - currentLength;
        //compute spacing
        size = 0.215;
        size += jointSize;
        size += extraSpace;
        if(size &gt; lengthLeft) { size = lengthLeft; }
        currentLength += size;
        //endPoint
        nextPoint = curves[i].PointAtLength(currentLength);
        circle = new Circle(currentPoint, previousVector, nextPoint);
        brick = new Brick(currentPoint, nextPoint, circle.Radius, previousVector, refSurface);
        bricks.Add(brick);
        //reset
        previousVector = nextPoint - currentPoint;

      }

      ////end brick
      //currentPoint = curves[i].PointAtLength(currentLength);
      //nextPoint = curves[i].PointAtEnd;
      //circle = new Circle(currentPoint, previousVector, nextPoint);
      //brick = new Brick(currentPoint, nextPoint, circle.Radius, refSurface);
      //bricks.Add(brick);




      ////smooth
      //Curve smoothCurve;
      //if(courseXPoints.Count &lt; 2) {
      //    Point3d[] pts = new Point3d[2];
      //    pts[0]  = curves[i].PointAtStart;
      //    pts[1] = curves[i].PointAtEnd;
      //    smoothCurve =  Curve.CreateInterpolatedCurve(pts, 1);
      //} else { smoothCurve = Curve.CreateInterpolatedCurve(courseXPoints, 1); }

      ////add brick
      //for(int k = 0; k &lt; courseXPoints.Count; k++) {
      //    Brick brick = new Brick(courseXPoints[k], brickLengths[k], curves[i], course, k, refSurface);
      //    bricks.Add(brick);
      //}

      ////ends
      //if(lengthLeft &lt; 0.0) {
      //    try {
      //        bricks[bricks.Count - 1].end = true;
      //        bricks[bricks.Count - 1].edgeLength = lengthLeft + sizeX;
      //    } catch { Component.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "brick.Count != courseXParameters.Count"); }
      //}


    }
  }
  void makeCutSurfaces(Surface surface, bool uv, out List&lt;Surface&gt; cuttingSurfaces0, out List&lt;Surface&gt; cuttingSurfaces1) {
    cuttingSurfaces0 = new List&lt;Surface&gt;();
    cuttingSurfaces1 = new List&lt;Surface&gt;();
    //List&lt;Point3d&gt; pts = new List&lt;Point3d&gt;();

    double distance = 1.000;
    int direction = 1;
    int otherDirection = 0;
    if(uv) { direction = 0; otherDirection = 1; }
    double u = surface.Domain(otherDirection).Mid;
    Curve c = surface.IsoCurve(otherDirection, u);
    double[] ts = c.DivideByLength(0.075, true);



    for(int i = 0; i &lt; ts.Length; i++) {
      Curve c1 = surface.IsoCurve(direction, ts[i]);
      Curve c2 = c1.OffsetNormalToSurface(surface, -distance);
      Vector3d normal = surface.NormalAt(ts[i], u);
      normal.Unitize();
      normal *= ( distance * 2.0 );
      Surface s = Surface.CreateExtrusion(c2, normal);
      if(i % 2 == 0) { cuttingSurfaces0.Add(s); } else { cuttingSurfaces1.Add(s); }
      //Point3d pt = surface.PointAt(ts[i], u);
      // pts.Add(pt);
    }




  }
  double curvature(Curve c, double currentLength) {
    double radius = 3.500;
    double t;
    c.LengthParameter(currentLength, out t);
    Vector3d vector3d1 = c.TangentAt(t);
    Vector3d vector3d2 = c.CurvatureAt(t);
    double length = vector3d2.Length;


    if(length &gt; 1.490116119385E-08) {
      Vector3d vector3d3 = ( vector3d2 / ( length * length ) );
      radius = vector3d3.Length;
      //              Print(vector3d3.Length.ToString());
      //              Circle circle;
      //              circle = new Circle(pt, vector3d1, (pt + (vector3d3 * 2.0)));
    }
    return radius;
  }
  double zGradient(Point3d testPoint, Curve curve) {
    BoundingBox bb = curve.GetBoundingBox(false);
    double t1 = map(testPoint.Z, bb.Min.Z, bb.Max.Z, 1.0, 0.0);
    if(t1 &lt; 0) { t1 = 0; } else if(t1 &gt; 1.0) { t1 = 1.0; }
    //    Print(testPoint.Z.ToString());
    //Print(t1.ToString());
    return t1;
  }
  bool imageClip(Point3d testPoint, Surface surface, System.Drawing.Bitmap bitmap, double threshold) {

    int normalizedPixelX, normalizedPixelY;
    double u, v, normalizedU, normalizedV;

    surface.ClosestPoint(testPoint, out u, out v);
    normalizedU = surface.Domain(0).NormalizedParameterAt(u);
    normalizedV = surface.Domain(1).NormalizedParameterAt(v);




    normalizedPixelX = (int) map(normalizedU, 0.0, 1.0, 1.0, (double) bitmap.Width);
    normalizedPixelY = (int) map(normalizedV, 0.0, 1.0, 1.0, (double) bitmap.Height);


    System.Drawing.Color pixelColor = bitmap.GetPixel(normalizedPixelX, normalizedPixelY);
    if(pixelColor.R &lt; threshold * 255) {
      return true;
    } else { return false; }
  }
  void setRelief(List&lt;Curve&gt; crvs, Brep surfaces, double reliefDistance) {

    try {
      for(int i = 0; i &lt; crvs.Count; i++) {
        for(int j = 0; j &lt; bricks.Count; j++) {



          double maxDist = bricks[j].sizeX * 0.5;
          double t;
          if(!( crvs[i].ClosestPoint(bricks[j].start, out t, maxDist) )) { continue; }

          Vector3d normal;
          ComponentIndex ci;
          double s, t2;
          Point3d closestPoint;

          surfaces.ClosestPoint(bricks[j].start, out closestPoint, out ci, out s, out t2, 1.000, out normal);
          normal.Z = 0.0;
          normal.Unitize();

          Transform move = Transform.Translation(normal * reliefDistance);
          bricks[j].start.Transform(move);


        }
      }
    } catch { }
  }
  double calculatePorosity(Point3d testPoint, List&lt;Curve&gt; porosityCurves, double maxDist) {
    double max = 0.0;
    for(int i = 0; i &lt; porosityCurves.Count; i++) {
      double t;
      porosityCurves[i].ClosestPoint(testPoint, out t, maxDist);
      Point3d testPoint2 = porosityCurves[i].PointAt(t);
      double dist = testPoint.DistanceTo(testPoint2);
      dist = 1.0 - ( dist / maxDist );
      if(max &lt; dist) { max = dist; }
    }

    return max * max;
  }
  double calculateRotation(Point3d testPoint, Curve rotationCurve) {
    BoundingBox bb = rotationCurve.GetBoundingBox(false);
    double t1 = map(testPoint.Z, bb.Min.Z, bb.Max.Z, 1.0, 0.0);
    if(t1 &lt; 0) { t1 = 0; } else if(t1 &gt; 1.0) { t1 = 1.0; }
    return t1;
  }
  double map(double currentValue, double oldMin, double oldMax, double newMin, double newMax) {
    return ( newMin + ( newMax - newMin ) * ( ( currentValue - oldMin ) / ( oldMax - oldMin ) ) );
  }
  public class Brick {
    //constructor
    public Brick(Point3d _start, Point3d _next, double _radius, Vector3d _tangent, Surface _refSurface) {
      //(Point3d _center, double _brickLength, Curve _centerLine, int _courseZ, int _courseX, Surface _refSurface) {
      this.start = _start;
      double length = ( _next - _start ).Length;
      if(sizeX &gt; length) { sizeX = length; }

      //make plane
      double s0, s1;
      Vector3d vecX, vecY, normal;
      _refSurface.ClosestPoint(this.start, out s0, out s1);
      normal = _refSurface.NormalAt(s0, s1);
      vecX = _next - _start;
      vecY = normal;
      this.plane = new Plane(this.start, vecX, vecY);

      this.radius = _radius;
      this.tangent = _tangent;
      this.endPt = _next;
      this.refNormal = normal;
    }

    //properties
    public Point3d start;
    public Point3d endPt;

    public double sizeX = 0.215;
    public double sizeY = 0.1025;
    public double sizeZ = 0.065;

    public double localRotation = 0.0;
    public double extraSpaceAfter = 0.0;
    public int courseZ;
    public int courseX;
    public int edge = 1;
    public bool end = false;
    public double length;
    public Plane plane;
    public double radius;
    public Vector3d tangent;
    public Vector3d refNormal;

    //methods
    public void setRotation(double degrees) {
      this.localRotation = degrees;
      if(this.courseZ % 2 == 1) {
        this.localRotation *= -1.0;
      }
    }
    public Brep draw() {

      if(this.radius &lt; 3.500 &amp;&amp; this.radius &gt; 0.1025) {
        Curve[] curves = new Curve[2];
        curves[0] = new ArcCurve(new Arc(this.start, this.tangent, this.endPt)); ;
        curves[1] = new ArcCurve(new Arc(this.start, this.tangent, this.endPt)); ;
        Transform translate0 = Transform.Translation(this.refNormal * this.sizeY * 0.5);
        Transform translate1 = Transform.Translation(this.refNormal * this.sizeY * -0.5);
        curves[0].Transform(translate0);
        curves[1].Transform(translate1);
        Brep b;
        b = Brep.CreateFromLoft(curves, Point3d.Unset, Point3d.Unset, LoftType.Straight, false)[0];
        b = Brep.CreateFromOffsetFace(b.Faces[0], 0.065, 0.001, false, true);


        return b;

      } else {





        Interval intervalX, intervalY, intervalZ;
        intervalX = new Interval(0.0, this.sizeX);
        intervalY = new Interval(-this.sizeY * 0.5, this.sizeY * 0.5);
        intervalZ = new Interval(0, this.sizeZ);

        Box box = new Box(this.plane, intervalX, intervalY, intervalZ);
        Transform xform = Transform.Rotation(( this.localRotation ) * Math.PI / 180, plane.ZAxis, box.Center);
        box.Transform(xform);

        return Brep.CreateFromBox(box);
      }
    }




  }
  #endregion













</item>
                    <item name="Description" type_name="gh_string" type_code="10">A C#.NET scriptable component</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">3aabdd86-588a-4c9c-9039-b10622495ca5</item>
                    <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
                    <item name="NickName" type_name="gh_string" type_code="10">brick</item>
                    <item name="OutParameter" type_name="gh_bool" type_code="1">true</item>
                    <item name="ReferenceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ScriptSource" type_name="gh_string" type_code="10">




    #region beginScript

    bool uv = false;
    bool reverse = false;

    bricks.Clear();
    List&lt;Surface&gt; cuttingSurfaces0;
    List&lt;Surface&gt; cuttingSurfaces1;
    List&lt;Curve&gt; curves0;
    List&lt;Curve&gt; curves1;

    makeCutSurfaces(refSurface, uv, out cuttingSurfaces0, out cuttingSurfaces1);

    curves0 = brickCourses(brickSurface, cuttingSurfaces0);
    curves1 = brickCourses(brickSurface, cuttingSurfaces1);

    layBrick(curves0, 0, refSurface, reverse);
    layBrick(curves1, 1, refSurface, reverse);


    //output boxes
    List&lt;Brep&gt; boxes0 = new List&lt;Brep&gt;();
    for(int i = 0; i &lt; bricks.Count; i++) { boxes0.Add(bricks[i].draw()); }
    bricks0 = boxes0;

    //output points
    List&lt;Point3d&gt; updatePoints = new List&lt;Point3d&gt;();
    for(int i = 0; i &lt; bricks.Count; i++) {
      updatePoints.Add(bricks[i].start);
    }
    outPoints = updatePoints;


    #endregion



</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="3">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>122</X>
                          <Y>176</Y>
                          <W>168</W>
                          <H>84</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>207</X>
                          <Y>218</Y>
                        </item>
                        <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="8">
                        <item name="InputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">4</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="6">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable brickSurface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">420e29e6-7512-41b3-9b76-67f19dd4c37d</item>
                            <item name="Name" type_name="gh_string" type_code="10">brickSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">brickSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">a53d6ee6-3f8a-4bf7-87ba-2d981229f948</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">2ceb0405-fdfe-403d-a4d6-8786da45fb9d</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>124</X>
                                  <Y>178</Y>
                                  <W>68</W>
                                  <H>40</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>159.5</X>
                                  <Y>198</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable refSurface</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3149bf7f-f99c-4728-ae39-8adc730222ce</item>
                            <item name="Name" type_name="gh_string" type_code="10">refSurface</item>
                            <item name="NickName" type_name="gh_string" type_code="10">refSurface</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">c0f80e76-a545-45ba-bebc-b0f06f9d8550</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">f4070a37-c822-410f-9057-100d2e22a22d</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>124</X>
                                  <Y>218</Y>
                                  <W>68</W>
                                  <H>40</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>159.5</X>
                                  <Y>238</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="Description" type_name="gh_string" type_code="10">Print, Reflect and Error streams</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">53059532-1f9c-407c-bba2-8b1f247aca5e</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">out</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>222</X>
                                  <Y>178</Y>
                                  <W>66</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>255</X>
                                  <Y>188</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter bricks0</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">076ac6fb-fa76-4f56-a84d-67935e93547c</item>
                            <item name="Name" type_name="gh_string" type_code="10">bricks0</item>
                            <item name="NickName" type_name="gh_string" type_code="10">bricks0</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>222</X>
                                  <Y>198</Y>
                                  <W>66</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>255</X>
                                  <Y>208</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter outCourses</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">32be7592-c60a-4d07-810c-d32ffb5aeefe</item>
                            <item name="Name" type_name="gh_string" type_code="10">outCourses</item>
                            <item name="NickName" type_name="gh_string" type_code="10">outCourses</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>222</X>
                                  <Y>218</Y>
                                  <W>66</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>255</X>
                                  <Y>228</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter outPoints</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0ab0ca0a-0e43-4095-b8db-6b86bed5c630</item>
                            <item name="Name" type_name="gh_string" type_code="10">outPoints</item>
                            <item name="NickName" type_name="gh_string" type_code="10">outPoints</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="3">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>222</X>
                                  <Y>238</Y>
                                  <W>66</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>255</X>
                                  <Y>248</Y>
                                </item>
                                <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="1">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">919e146f-30ae-4aae-be34-4d72f555e7da</item>
                <item name="Name" type_name="gh_string" type_code="10">Brep</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of Breps (Boundary REPresentations)</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">a53d6ee6-3f8a-4bf7-87ba-2d981229f948</item>
                    <item name="Name" type_name="gh_string" type_code="10">Brep</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Brep</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>40</X>
                          <Y>191</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>65</X>
                          <Y>201</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">488e850a-67ab-426d-a72c-9f4b4800fc15</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="2">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">deaf8653-5528-4286-807c-3de8b8dad781</item>
                <item name="Name" type_name="gh_string" type_code="10">Surface</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of generic surfaces</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">c0f80e76-a545-45ba-bebc-b0f06f9d8550</item>
                    <item name="Name" type_name="gh_string" type_code="10">Surface</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Surface</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>39</X>
                          <Y>224</Y>
                          <W>53</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>65.5</X>
                          <Y>234</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <items count="1">
                                <item name="RefID" type_name="gh_guid" type_code="9">dcb9a067-168a-43e4-b4df-0bc4d834bd8a</item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="3">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">9b94b8b2-d5a5-4803-a794-cc3518879fbe</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Panel</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">53059532-1f9c-407c-bba2-8b1f247aca5e</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                    <item name="UserText" type_name="gh_string" type_code="10">Double click to edit panel content…</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="6">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>121</X>
                          <Y>58</Y>
                          <W>160</W>
                          <H>91</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>121.75</X>
                          <Y>58.5</Y>
                        </item>
                        <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>127;200;200;200</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="2234">iVBORw0KGgoAAAANSUhEUgAAAJYAAABkCAIAAADrOV6nAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAhPSURBVHhe7ZpZUxNLFID9vZTlA+8opRZFlfCCWuUCWqWioOC+sSiyhLALYZVFwAsKKiKyK3rvd3PavrlJTCSOyEnO9zDV09Mzo+ebc7obOGBkA38bavlP4V+Z8urVq7m5uenp6erq6oGBgdHR0ZFA4YGRSISHT01Nzc/Pu7caUYJRuLCwsLKyEgqFjhw5MjEx4RWOReEUYtsQ2wa5CnIqt3vomZycLCwsrK+vf/funXurESUYhUtLS2/evJmZmampqenv7xcHHDs7O7u7uwcHB/v6+np6enp7e8lR8okx9NDP6fPnzxnGqYzhlGFxFjllZG1tLYlOuru3GlGCUUhxe/v2LSIpdLEKw+FwU1MTYtrb22m0tLTQ6OjoaI6CXeS1tbW1trbKJY60uWt4eFjkCaKQ/OZDca80vhOMQuZCjpQ4okxuUQ996EHanqQ9cZ1JFQ4NDdlEmEgwCgXiS+ipk+Pj4y9evPAifx2v8PXr1+5lxneCVEh8ibIUUsCiuKTtVGQKTzCFP+J3KXSxjy5KxaWsNl3vLjGFKQheIbH2ewNBHIhIyUuvM3o9PYznscyypjCR4BV2dXURbnIxKWKCYSCbCjrZSMjVH8Ew2ZyYwkSCVMiObXZ2VtykhWFkoa+xsg4CdzkBxvNw2xQmEqRCIMQkyk/CCpbjwsICuxH2lMDmkp0f/YIM85i/pASsMDNkW4kzdGJRRCKMfrlkpGBfKPSYywzYXwo9sS4ps+YyBftUoce7XFxcNJdJ2e8KPYkuWeD4/lxGjUKPOMMfLhHJEa++PwfRp1BAmDijriISmDWlwMqA3OEPKCTQhJvsCQQeBSj88OHDysrKx48fOc0pkXutUBKlvb299SeQ3wZ74k7jkF8Xh0KhqamppaUlqmuOiNxrheTN06dPw+Gw/LA7NcPDw+7Ha4ODkUhkZGRkenoaQy9fvnQjEuCWBw8eMFOy5CEd3VuzmgAUElCYmZmRhocecs4N+g4KHz16RLnjdbvl27dvzHwUTES6rmRUV1dfu3ZNfmInK53shv9yhgopU3zmRJMw8dVzJGTEF+inR/5UKbag0Xj//n1jYyNXo9F27OzsfP78Wdp4kgasr69vb29zCb58+bK8vHzjxg301NfXb21t0SOXYuGuK1euFBQUrK6u4lvem93wX85QISsI8olociOBvnfvXkdHB+WOUraxsUEnEa+oqJidnSWUOANuoRgePXqUTuYtZsTOzs6GhoYnT548e/YM5TyQ04Hon7VNTk7iSVTB5uYmj+W4trZGQy7xXpC2wHtv3rzJk3mpzYVpINvOnTt3584dbiR2NKCysvLUqVNUSzqJ9bFjxyYmJsjOf9eOi4vyt6aHDh0iTRlMxautrb106RL6mcBqamoePnxIJ+J5DlOmJBb5xLuQR+Pr1688maxFqryXt3DkqkAS80FQxhNreLZCHDJUSIxIlJ6eHhe8zU0iS06QahJTBpBkJB/Z4EHk1atXaTASPZJPFEyBTm6kU/o5IuPgwYNYwQ01+datW/jmFN/kMVlL6vMcd//6OsP4Js6cOcNyxv1Ds53MFQJ6OI6Pj5Nq6JQjQadBJ0vHxNmIyFIqWelgiKwih2KJ7aENjDx58iRllrTj46BIVlVVYZFJUZKYqot1GQykKQqLioqYdN0rs51fUgip61XiVZlB0Ywk6mpqWLjyEZSVlTU1NaGcckqeSdaSeZijgTY3OgpXKdFDufSHUpkrlKpIlrA2kXhxJOJoo+JxxBONuGUFCpnwSNZPnz6x3kkL28eSkpLe3l6UM6dyRBv9pDh5RqWVfKVBP8+kgUIWTaYwPSxJqG9870SQCYkI4qyrq4vI4omMYVqqq6tjVx67r6CQsoilzJJhsgnBh2QSp3T6fo48ByvHjx9//PgxOcdzKKQkMaWSIw/H1v3791n70HPhwoWWlhbmYxrFxcVWSNNDjFhwYggrRJCFBvGlcf78eXZmnPLA8vJytnHYJV8lLbDCcmZsbAxJ3MiRnr6+PvQjkoQGbxH4JvLz85n8yDYymz0lOtva2tg2NDc38zUA5q5fv3737t1wOMyCiAXt6dOnbTmTHrKQILKBY6FB9EkX5idZpAANVhaEmzSlloKkFFHOy8sTT2wECfeJEyeI+OXLl2/fvs2GhMUL4i9evEh6oZD0ZXGEfj4CHiITHs+XskmDI8jMGi29y9woNdz9Q7OdzBXKXIgMpiWOTIookalRTun3c6GAdYwWFBTIZpEekokdAqtKEosGHwQphXg2hWxXGM8rSHfxh0ggvajD7CjwJO/ivQxgMPBlUFfZzNB2/9BsJ3OFHtGTlLgVKT2Yw1AkEiHEWEEPPVjxDSmh0kYPH4GYYzCLIOY5qjRZyzIVVUyTpaWlrHfIYJ7AMLLw7Nmzhw8f5tS9NdsJQOGuoJxS6EZHR/FEOzUo4YhLoIFOZk1mR5KVj4PFaigU6u/vl78fxzpjKLBMxky3tN0rs50/oJAFCElDwWRBmxpKa0NDA0sYoEF1pfAC5rid2svMSlt62DvKXWz5ERxXALKYvVZIZCmPRB8HaZFf5HriTpOCwpza18NeKwQssvr4TZDlOeUP/oBCI1hMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXpMoXr+p9BQilNoKObAgX8AX/vJi5ExsZkAAAAASUVORK5CYII=</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>